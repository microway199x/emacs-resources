#+OPTIONS: ^:nil
#+OPTIONS: ^:{}
#+TITLE: emacs verilog-mode tips
* 外部程序使用emacs verilog-mode
#+begin_src
  //emacs --batch  <filenames.v>  -f verilog-batch-auto
  //例子
  emacs --batch test.v -f verilog-batch-auto
#+end_src
* 函数
** verilog-auto-tieoff                                                :常用:
+ 将未使用的输出tieoff，经常用于包空module;
   #+begin_src
       verilog-auto-tieoff       for AUTOTIEOFF output tieoffs ///用于将输出固接
     //需配合verilog-active-low-regexp配置变量使用，设置为true，表示固接或者复位为低电平
     //但是该变量有时候会导致verilog-auto-tieoff/verilog-auto-reset 失败
   #+end_src
+ verilog-auto-tieoff-declaration变量，
  + 设置为"wire"，则使用wire a= 0;
  + 设置为"assign"，则使用assign a= 0;

** verilog-auto-inout-param                                           :常用:
+ 提供将下一层参数提取到当前层的功能
+ eg：
  #+begin_src
    //before
        module ExampMain ();
          parameter PARAM = 22;
        endmodule

        module ExampInoutParam ();
           /*AUTOINOUTPARAM("ExampMain")*/
        endmodule
    //after verilog-auto
        module ExampInoutParam ();
           /*AUTOINOUTPARAM("ExampMain")*/
           // Beginning of automatic parameters (from specific module)
           parameter       PARAM;
           // End of automatics
        endmodule
  #+end_src
+ 提供正则表达式，用于只提取对应的参数
  #+begin_src
    /*AUTOINOUTPARAM("ExampMain","^i")*/
  #+end_src
** verilog-auto-instert-last/verilog-auto-insert-lisp                 :脚本:
+ xxx-last为在执行verilog-auto之后，再插入执行LISP代码片段
+ xxx-lisp为在执行verilog-auto的时候，插入执行LISP的代码片段
+ [ ] 可以用来自动插入代码模板，以及解析代码片段等
** verilog-auto-inst --- 最重要                                  :常用:重要:
+ verilog-auto-inst-param-value:
  + 设置为nil,则例化时使用参数而不会被替换为值
  + 设置为t,则例化时将参数例化为值
+ 放在/*AUTOINST*/前的信号不会被自动例化
+ auto-inst 模板
  + verilog-auto-inst-template-numbers设置
    - 可以设置为 t/ture/lhs， 其中lhs会在template例化信号后面添加当前
      信号对应的匹配的AUTO_TEMPLATE rules
  + 多个模块公用模板,当多个模块模板相同时可以简化使用
      #+begin_src
       /* InstModuleA AUTO_TEMPLATE
           InstModuleB AUTO_TEMPLATE
           InstModuleC AUTO_TEMPLATE
           InstModuleD AUTO_TEMPLATE (
                .ptl_bus        (ptl_busnew[]),
                );
        */
       #+end_src
  + 当一个模块例化多次，并且需要使用不同的模板时，直接将使用不同模板的
    例化INST放在对应模板后面即可
      #+begin_src
       //Template A
       /* InstModuleA AUTO_TEMPLATE (
                .ptl_bus        (ptl_busnew[]),
                );
        */
       //UA,UB使用template A
        InstModuleA UA_TEMPLATE ( /*AUTOINST*/
                                );
        InstModuleA UB_TEMPLATE ( /*AUTOINST*/
                                );

       //Template B
       /* InstModuleA AUTO_TEMPLATE (
                .ptl_bus        (ptl_busnew[]),
                .aaa_bus        (aaa_bus_new[]),
                .b_bus          (b_bus_new[]),
                );
        */
       //UC,UD使用template B
        InstModuleA UC_TEMPLATE ( /*AUTOINST*/
                                );
        InstModuleA UD_TEMPLATE ( /*AUTOINST*/
                                );
       #+end_src

  + 当一个模块例化多次，使用模块部分模块例化名等
    #+begin_src
      ///方式1: 使用@符号提取 instance name中的正则匹配的变量
             /* InstName AUTO_TEMPLATE <optional "REGEXP"> (
                .sig1   (sigx[@]),
                .sig2   (sigy[@"(% (+ 1 @) 4)"]),
                );
             */
      ///方式2: 使用lisp表达式，提取vl-cell-name（例化名）
         //假设sig1为input, sig2为output
             /* InstName AUTO_TEMPLATE(
                .sig1   (@"vl-name"_@"vl-dir"),
                .sig2   (@"vl-name"_@"(substring vl-cell-name 2)"),
                );
             */
             InstName U_AA(/*AUTOINST*/
                .sig1   (sig1_input),
                .sig2   (sig2_AA   ),   //提取instance name的部分字符串
             );
      ///方式2.1: 注意在模板中使用字符串时，需要使用  \\"string-in-lisp-code\\"
      /// 原因时Elisp会把\当做特殊字符？如果想要使用\字符，则需要通过 \\完成转义？
      /// 同理，如果在模板的代码中使用正则表达式时，则为 \\\\？
             /* InstName AUTO_TEMPLATE(
                .sig1   (@"vl-name"_@"vl-dir"),
                .sig2\(.*\)  (@"vl-name"_\1_@"(if (string-equal vl-dir) \\"input\\" \\"output\\")" ),
                //@"..."引号中的部分会被当做时lisp表达式，并且会按照lisp表达式执行替换；
                //模板例化信号名字为：端口信号名+端口信号名匹配.*部分+（如果为输入，则_input,如果为输出则_output）
                );
    #+end_src
+ Lisp template: 
  + 如果，当前template不是使用正则匹配的表达式，则LISP表达式中的所有
    "字符，使用\"表示。
  + 如果，当前template是使用正则匹配的表达式，则LISP表达式中的所有
    "字符，使用\\"表示。
  + 原句:Quote all double-quotes inside the expression with a leading
    backslash (\"...\"); or if the Lisp template is also a regexp
    template backslash the backslash quote (\\"...\\").
  + [ ] 使用auto_lisp可以添加comment，/*AUTO_LISP(setq foo 1)*/
** verilog-auto-inst-param                                            :常用:
+ 用于template快速例化参数，
+ 支持只有正则匹配的参数才例化
+ 或者使用？!，表示匹配xxx的不例化，比如？！xxx,不例化xxx参数

** verilog-auto-unused
+ 将不使用的input信号接到 _ununsed_ok 信号上；方便检查，

** verilog-compiler/verilog-set-compile-command                       :常用:
+ 使用compile命令自动compile文件
+ next-error跳转到下一条错误；
+ [ ] 使用verilog-preprocess命令完成简单的预编译检查？
+ 通过verilog-set-compile-command设置编译命令

** verilog-inject-auto::function
+ 用于已经有verilog file，但是还没有使用verilog-mode的情况？
+ 自动插入AUTOS

** 指定当前文件需要的文件来源变量                                :常用:重要:
+ verilog-library-directories
+ verilog-library-files
+ verilog-library-flags
+ verilog-library-extensions
  #+begin_src
    // Local Variables:
    // verilog-library-directories:("." "subdir" "subdir2")
    // verilog-library-files:("/some/path/technology.v" "/some/path/tech2.v")
    // verilog-library-flags:("-f filename -y dir -y otherdir")
    // verilog-library-flags:(".v",".sv")
    // End:
  #+end_src

** verilog-read-defines
+ 获取define/parameter变量，并且将变量存入vh-{definename}中，并且可以
  在AUTOS的LISP变量中可以使用。

** verilog文件中，可以在文件末尾指定只在当前文件下生效的变量          :常用:
#+begin_src
    // Local Variables:
    // verilog-auto-read-includes:t
    // verilog-auto-lineup:'all
    // indent-tabs-mode: nil
    // End:
#+end_src

** verilog-read-sub-decls::function::                                 :常用:
+ 获取连接到module的信号名，并且返回一个list，按照
  [outputs,inouts,inputs]排列
+ 只会在/*AUTOINST*/的信号下生效，但是也可以是用//Inputs //Output手动
  指定

** verilog-auto-inout-comp/verilog-auto-output-every/verilog-auto-inout-in::function
+ 用于将该模块的输入输出反向，比如input变成output，用于搭建对接模块或者测试模块；
+ verilog-auto-output-every:用于将所有内部信号全部输出，用于debug等；
+ verilog-auto-reg-input:用于将所有输入信号变成reg信号，用于环境搭建
+ verilog-auto-input-in:用于将所有信号全部变为输入信号，用于验证环境搭建
+ verilog-auto-inout-module:用于将模块所有输入输出信号全部提取出来，用于需要空壳场景时使用。
** verilog-load-file-at-point
+ 用于加载当前光标下的模块对应的文件，一般不使用，可以用于快速跳转
* 在verilog文件中使用自定义函数的几种方式                              :效率:
1. 在verilog-mode使用时，需要较复杂的函数管理或者生成代码时，通过一下集中方式添
   加自定义函数，提高效率, 并且通过在“AUTO_TEMPLATE”中通过@“（elisp脚本）”调
   用函数
   + 通过将函数添加在emacs配置中，然后可以在 *所有verilog* 文件中调用对应的函数
   + 通过AUTO_LISP添加函数，并且在 *当前verilog文件中调用* ,
    #+begin_src
      ///如下例子，获取当前instance名字最后的数字部分
      /* AUTO_LISP(defun getparam2 (strg)
          (string-match "[^0-9]*[0-9]+[^0-9]*\\([0-9]+\\)" strg)
          (match-string 1 strg)) */
      /* InstModule AUTO_TEMPLATE (
          .in            (a_@"(getparam2 vl-cell-name)"),  //例化的信号名为"a_<例化模块名的最后的数字部分>"
          .in_0_xx_[0-9] (b_@"(getparam2 vl-name)"),       //例化的信号名为"b_<信号名最后的数字部分>"
          );
          */
      InstModule u_inst_0_yy_1001 (
          .in         (a_1001),
          .in_0_xx_00 (b_00),
          .in_0_xx_01 (b_01),
          .in_0_xx_02 (b_02),
          .in_0_xx_03 (b_03),
          .in_0_xx_04 (b_04),
          );
          */
    #+end_src
   + 将verilog文件需要的elisp函数独立问一个el文件，并且在需要的verilog文件中使
     用，从而elisp函数可以在多个文件中使用，
    #+begin_src
      ///a: elisp函数集文件
     (defun my-func (z) "Documentation: return z"
        z)
     ;; ...
     (provide `my-vm-library)

     ///b: Verilog文件中调用函数集

     /*AUTO_LISP(require 'my-vm-library "path/to/my-vm-library.el")*/

    #+end_src
   + 在文件尾，通过eval：添加函数，可以添加多个函数，通过eval：隔开,并且可以通过eval设置变量
    #+begin_src
      module elist_func_eval_test();

      //通过模板中添加“[]”，自动展开信号位宽
      //信号名正则表达式捕获，通过 "\(xxx\)" 捕获xxx匹配的信号名，并通过\1,\2变量获取匹配的分组，并使用
      //也可以通过@符号，以及正则匹配的方式获取AUTO_TEMPLATE的正则匹配
      /*test_module AUTO_TEMPLATE(
          .a_[0-9]*              (@"(upperx vl-name)"[]),   /// 调用upperx函数，将所有"a_<数字>"的信号例化连接为大写的信号名上
          .b_[0-9]*              (@"(tieoff vl-dir)"),    /// 调用tieoff函数，将所有"b_<数字>"的信号例化输入固接为0，输出悬空
          .c_\([0-9]*\)          (d_\1[]            ),    /// 获取模块接口"c_<数字>"中的数字，并将接口例化为"d_<数字>",并通过“[]”展开位宽
      );
      */
      test_module u_test(
      .a_00          (A_00         ),//信号位宽为1
      .a_01          (A_01[1:0]    ),//信号位宽为2
      .a_02          (A_02[2:0]    ),//信号位宽为3
      .b_00          ({1{1'b0}}    ),//信号位宽为1，固接
      .b_01          ({2{1'b0}}    ),//信号位宽为2，固接
      .b_02          ({3{1'b0}}    ),//信号位宽为3，固接
      .b_03          (             ),//信号位宽为4，输出，悬空
      .c_00          (d_00         ),//信号位宽为1
      .c_01          (d_01[1:0]    ),//信号位宽为2
      .c_02          (d_02[2:0]    ),//信号位宽为3
      );

      endmodule
  /*
     Local Variables:
     verilog-library-flags:("-y incdir1/ -y incdir2/")
     verilog-library-directories:("." "dir1" "dir2" ...)
     eval: (defun upperx (name)
               (uppercase name))
     eval: (defun tieoff (dir)
               (if (string-equal dir "input")
                   (concat "{" vl-width "{1'b0}}")
                   ""))
    eval:(setq verilog-auto-output-ignore-regexp (concat
       "^\\("
       "signal1_.*"
       "\\|signal2_.*"
       "\\)$"
       )))
     End:
   */

    #+end_src

* 在verilog文件中AUTO搜索文件路径以及文件添加
#+begin_src
   ///通过 verilog-library-flags添加搜索的文件夹
   // Local Variables:
   // verilog-library-flags:("-y incdir1/ -y incdir2/")
   // End:

   ///通过 verilog-library-directories添加搜索的文件夹
   // Local Variables:
   // verilog-library-directories:("." "dir1" "dir2" ...)
   // End:
   
   ///通过 verilog-library-flags添加搜索的文件夹的list文件
   
   // Local Variables:
   // verilog-library-flags:("-f ../../up_to_top/include/input.vc")
   // End:
#+end_src

* 在verilog文件中通过eval设置Elisp变量设置
*"eval：(elisp函数)"：通过eval可以求值任意elisp函数或者变量；*
#+begin_src
// Local Variables:
// eval:(setq verilog-library-directories (list (substitute-in-file-name "$W") ))
// End:
#+end_src
   
* 通过正则匹配，高效例化模块
  1. instance 模块名正则匹配
     #+begin_src
       //也可以通过@符号，以及正则匹配的方式获取AUTO_TEMPLATE(对应的instance模块名、vl-cell-name)的正则匹配
       //"vl-cell-name"可以在@“(elisp脚本)”中直接使用和求值
       /* InstName AUTO_TEMPLATE <optional "REGEXP"> (
                .sig1   (sigx[@]),
                .sig2   (sigy[@"(% (+ 1 @) 4)"]),
                );
        */
       ///example 
        /* InstModule AUTO_TEMPLATE "_\([a-z]+\)" (
                .ptl_mapvalidx          (@_ptl_mapvalid),
                .ptl_mapvalidp1x        (ptl_mapvalid_@),
                );
        */
        InstModule ms2_FOO (/*AUTOINST*/);
        InstModule ms2_BAR (/*AUTOINST*/);

      /// Typing M-x verilog-auto will make this into: 

        InstModule ms2_FOO (/*AUTOINST*/
            // Outputs
            .ptl_mapvalidx              (FOO_ptl_mapvalid),
            .ptl_mapvalidp1x            (ptl_mapvalid_FOO));
        InstModule ms2_BAR (/*AUTOINST*/
            // Outputs
            .ptl_mapvalidx              (BAR_ptl_mapvalid),
            .ptl_mapvalidp1x            (ptl_mapvalid_BAR));


     #+end_src
  2. instance 模块接口正则匹配
     #+begin_src
       module elist_func_eval_test();

       //通过模板中添加“[]”，自动展开信号位宽
       //信号名正则表达式捕获，通过 "\(xxx\)" 捕获xxx匹配的信号名，并通过\1,\2变量获取匹配的分组，并使用
       //也可以通过@符号，以及正则匹配的方式获取AUTO_TEMPLATE(对应的instance模块名、vl-cell-name)的正则匹配
       /*test_module AUTO_TEMPLATE(
           .a_[0-9]*              (@"(upperx vl-name)"[]),   /// 调用upperx函数，将所有"a_<数字>"的信号例化连接为大写的信号名上
           .b_[0-9]*              (@"(tieoff vl-dir)"),    /// 调用tieoff函数，将所有"b_<数字>"的信号例化输入固接为0，输出悬空
           .c_\([0-9]*\)          (d_\1[]            ),    /// 获取模块接口"c_<数字>"中的数字，并将接口例化为"d_<数字>",并通过“[]”展开位宽
       );
       */
       test_module u_test(
       .a_00          (A_00         ),//信号位宽为1
       .a_01          (A_01[1:0]    ),//信号位宽为2
       .a_02          (A_02[2:0]    ),//信号位宽为3
       .b_00          ({1{1'b0}}    ),//信号位宽为1，固接
       .b_01          ({2{1'b0}}    ),//信号位宽为2，固接
       .b_02          ({3{1'b0}}    ),//信号位宽为3，固接
       .b_03          (             ),//信号位宽为4，输出，悬空
       .c_00          (d_00         ),//信号位宽为1
       .c_01          (d_01[1:0]    ),//信号位宽为2
       .c_02          (d_02[2:0]    ),//信号位宽为3
       );

       endmodule
   /*
      Local Variables:
      verilog-library-flags:("-y incdir1/ -y incdir2/")
      verilog-library-directories:("." "dir1" "dir2" ...)
      eval: (defun upperx (name)
                (uppercase name))
      eval: (defun tieoff (dir)
                (if (string-equal dir "input")
                    (concat "{" vl-width "{1'b0}}")
                    ""))
     eval:(setq verilog-auto-output-ignore-regexp (concat
        "^\\("
        "signal1_.*"
        "\\|signal2_.*"
        "\\)$"
        )))
      End:
    */

     #+end_src

* 替换include文件中的define值，或者指定文件的define值 --> 显示变量
1. verilog-auto-read-includes设置为true，但是设置完成后，不会在接口/例化时替换掉
   `define-xxx的符号。不能显示的计算和表达出信号位宽和含义。
2. verilog-read-defines/verilog-read-includes和上一点的行为相同。
3. 所以通过如下方法将变量中的define替换为设置的“变量/符号”。
   1. 方式一： 直接替换define变量,但是不会化简位宽表达式
         #+begin_src verilog
           ///test_define.vh中的内容
           `define WIDTH 8
           `define PW    16
           `define DW    64
           `define AW    32
           ///test2_define.vh中的内容
           `define HANDSHAKE      axi4_handshake
           `define HANDSHAKE_B    axi3_handshake
           `define HW             4
         #+end_src 
      #+begin_src verilog
         `include "test_define.vh"
         `include "test2_define.vh"

         module inst_module(
            input [`WIDTH-1 :0 ] a1,
            input [`WIDTH+1 :0 ] a2,
            input [`PW-1 :0 ]    b1,
            input [`DW-1 :0 ]    data,
            input [`AW-1 :0 ]    addr,
            input                `HANDSHAKE,   ///can expand?
            input [`HW-1 :0 ]    `HANDSHAKE_B, ///can expand?
           );
          ,*/
          );

         ...
         endmodule

         module example(
            ...
            //例化模块，并将所有definr符号替换为 “define value”
          /* inst_module AUTO_TEMPLATE (
             ..*            (@"(verilog-symbol-detick-test (concat vl-name vl-bits))"),
           );
          */
           inst_module u_inst (/*AUTOINST*/
               .a1                   (a1[8-1:0]),
               .a2                   (a2[8+1:0]),
               .b1                   (b1[16-1:0]),
               .data                 (data[64-1:0]),
               .addr                 (addr[32-1:0]),
               .`HANDSHAKE           (axi4_handshake),     
               .`HANDSHAKE_B         (axi3_handshake[4-1:0]),     
          );

         ...
         endmodule
        //Local Variables:
        //verilog-library-flags:("-y incdir1/ -y incdir2/")
        //verilog-library-directories:("." "path1/dir1" "path2/dir2" ...)
        //End:
      #+end_src 
   2. 方式二： 替换define变量,然后化简位宽表达式
         #+begin_src verilog
           ///test_define.vh中的内容
           `define WIDTH 8
           `define PW    16
           `define DW    64
           `define AW    32
           ///test2_define.vh中的内容
           `define HANDSHAKE      axi4_handshake
           `define HANDSHAKE_B    axi3_handshake
           `define HW             4
         #+end_src 
      #+begin_src verilog
         `include "test_define.vh"
         `include "test2_define.vh"

         module inst_module(
            input [`WIDTH-1 :0 ] a1,
            input [`WIDTH+1 :0 ] a2,
            input [`PW-1 :0 ]    b1,
            input [`DW-1 :0 ]    data,
            input [`AW-1 :0 ]    addr,
            input                `HANDSHAKE,   ///can expand?
            input [`HW-1 :0 ]    `HANDSHAKE_B, ///can expand?
           );
          ,*/
          );

         ...
         endmodule

         module example(
            ...
            //例化模块，并将所有definr符号替换为 “define value”
            //并且根据表达式，简化位宽表达时候
          /* inst_module AUTO_TEMPLATE (
             ..*            (@"(verilog-symbol-detick-test vl-name)"@"(calc-expression vl-bits)"),
           );
          ,*/
           inst_module u_inst (/*AUTOINST*/
               .a1                   (a1[7:0]),
               .a2                   (a2[9:0]),
               .b1                   (b1[15:0]),
               .data                 (data[63:0]),
               .addr                 (addr[31:0]),
               .`HANDSHAKE           (axi4_handshake),     
               .`HANDSHAKE_B         (axi3_handshake[3:0]),     
          );

         ...
         endmodule
        //Local Variables:
        //verilog-library-flags:("-y incdir1/ -y incdir2/")
        //verilog-library-directories:("." "path1/dir1" "path2/dir2" ...)
        //eval: (defun calc-expression (txta)
        //          (if (equal nil txta)
        //              ""
        //              (progn 
        //                   (setq ewid (verilog-make-width-expression
        //                                   (verilog-simplify-range-expression (verilog-symbol-detick-text txta))))
        //                   (if (equal ewid "1")
        //                       ""
        //                       (verilog-simplify-range-expression (verilog-symbol-detick-text txta)))
        //              )))
        //              
        //End:
      #+end_src 
   #+end_src 
* 修改verilog-mode文件，format对齐例化模块的连线信号
1. 由于例化模块时，输出AUTOINST模块信号对于右边括号不对齐，导致看代码时比较难受，
   尤其是信号名较长时，导致右边括号与相邻行的信号混在一起。

   [[./_images_emacs-verilog-mode-tips.org/20230702133736.png]]

2. 在填写AUTO_TEMPLATE时，verilog-mode会将信号结尾的空格也一并生成，导致生成的代
   码更乱，

   [[./_images_emacs-verilog-mode-tips.org/20230702151347.png]]

   [[./_images_emacs-verilog-mode-tips.org/20230702154209.png]]
3. 所以修改Verilog-mode中的产生连线信号的函数，去除AUTO_TEMPLAE中信号结尾的空格，
   并且让输出信号对齐。
   [[./_images_emacs-verilog-mode-tips.org/20230702151514.png]]
   #+begin_src elisp
     ;;;修改verilog-auto-inst-port函数，
     (defun verilog-auto-inst-port (section port-st indent-pt moddecls tpl-list tpl-num
                                       for-star par-values)
      ;; Replace @ and [] magic variables in final output
       (setq tpl-net (verilog-string-replace-matches "@" tpl-num nil nil tpl-net))
       (setq tpl-net (verilog-string-replace-matches "\\[\\]\\[\\]" dflt-bits nil nil tpl-net))
       (setq tpl-net (verilog-string-replace-matches "\\[\\]" vl-bits nil nil tpl-net)))
     ;;;<修改点>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
     ;;;USER-CHANGED MICRO add for template has many spaces
       (setq tpl-net (format "%-55s" (replace-regexp-in-string "[ ]*$" "" tpl-net)))
     ;; Insert it
       (when (or tpl-ass (not verilog-auto-inst-template-required))
          (verilog--auto-inst-first indent-pt section)
          (indent-to indent-pt)
          (insert "." port)
          (unless (and verilog-auto-inst-dot-name
                    (equal port tpl-net))
          (indent-to verilog-auto-inst-column)
          (insert "(" tpl-net ")"))
           (insert ",")
   #+end_src

     [[./_images_emacs-verilog-mode-tips.org/20230702152013.png]]
4. 同理，修改input/output等信号定义输出位宽，输出效果如下：
   [[./_images_emacs-verilog-mode-tips.org/20230702154730.png]]

   [[./_images_emacs-verilog-mode-tips.org/20230702154751.png]]

   #+begin_src elisp
           ;;;修改函数
      (defun verilog-insert-definition (modi sigs direction indent-pt v2k &optional dont-sort)
        "Print out a definition for MODI's list of SIGS of the given DIRECTION,
         with appropriate INDENT-PT indentation.  If V2K, use Verilog 2001 I/O
         format.  Sort unless DONT-SORT.  DIRECTION is normally wire/reg/output.
         When MODI is non-null, also add to modi-cache, for tracking."

     
       ;;;<USER MICRO changed> (insert (if v2k "," ";"))
       (if (or (not verilog-auto-wire-comment)
               (not (verilog-sig-comment sig))
               (equal "" (verilog-sig-comment sig)))
       ;;;{<USER MICRO changed> (insert (if v2k "," ";"))
       ;;;(insert  "\n")
       (insert (concat (if v2k "," ";") "\n"))
       ;;;(indent-to (max 48 (+ indent-pt 40)))
       (indent-to (max 80 (+ indent-pt 66)))
       ;;;(verilog-insert "// " (verilog-sig-comment sig) "\n"))
          (verilog-insert (if v2k "," ";") "// " (verilog-sig-comment sig) "\n"))
       ;;;}<USER MICRO changed> (insert (if v2k "," ";"))
         (setq sigs (cdr sigs)))))
   #+end_src

   [[./_images_emacs-verilog-mode-tips.org/20230702155259.png]] 
   
* reference 
https://veripool.org/verilog-mode/help/#verilog-compiler
https://veripool.org/verilog-mode/help/
https://github.com/veripool/verilog-mode/blob/master/FAQ.rst
